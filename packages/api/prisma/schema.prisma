generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output = "../src/@generated/prisma-nestjs-graphql"
 }

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(64)
  email String @db.VarChar(256)
  emailVerified Boolean  @default(false) @db.TinyInt
  isAnonymous Boolean  @default(false) @db.TinyInt
  uid String @db.VarChar(255)
  photoUrl String? @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  attachment Attachment[]
  task Task[]
  comment Comment[]
  tag Tag[]
  project Project[]

  tasksOnUsers TasksOnUsers[]
  usersOnWorkspaces UsersOnWorkspaces[]

  @@unique([uid])
  @@unique([email])
}

model Task {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  detail String?
  startAt DateTime? @db.DateTime(6)
  limitAt DateTime? @db.DateTime(6)
  priority TaskPriority @default(nomal)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  userId Int
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction)

  projectId Int
  project Project? @relation(fields: [projectId], references: [id], onUpdate: NoAction)

  attachment Attachment[]
  comment Comment[]
  tasksOnUsers TasksOnUsers[]
  tasksOnTags TasksOnTags[]

  @@index([projectId])
  @@index([userId])
}

model Workspace {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  detail String?
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  ImageId Int?
  attachment Attachment? @relation(fields: [ImageId], references: [id], onUpdate: NoAction)

  tag Tag[]
  project Project[]
  usersOnWorkspaces UsersOnWorkspaces[]

  @@unique([ImageId])
}

model Project {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  detail String?
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  userId Int
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction)
  workspaceId  Int
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: NoAction)
  task Task[]

  @@index([userId])
  @@index([workspaceId])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  color TagColor @default(default)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)
  
  workspaceId Int
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: NoAction)
  userId Int
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction)

  tasksOnTags TasksOnTags[]

  @@index([workspaceId])
  @@index([userId])
}

model Comment {
  id Int @id @default(autoincrement())
  body String
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  taskId Int
  task Task? @relation(fields: [taskId], references: [id], onUpdate: NoAction) 
  userId Int
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([taskId])
  @@index([userId])
}

model Attachment {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  path String @db.VarChar(250)
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(6)

  userId Int
  user User? @relation(fields: [userId], references: [id], onUpdate: NoAction)
  taskId Int?
  task Task? @relation(fields: [taskId], references: [id], onUpdate: NoAction)

  workspace Workspace?

  @@unique([path])
  @@index([userId])
  @@index([taskId])
}

model TasksOnTags {
  taskId Int
  tagId Int
  task Task @relation(fields: [taskId], references: [id], onUpdate: NoAction)
  tag Tag @relation(fields: [tagId], references: [id], onUpdate: NoAction)

  @@id([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}

model TasksOnUsers {
  taskId Int
  userId Int
  task Task @relation(fields: [taskId], references: [id], onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@id([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model UsersOnWorkspaces {
  userId Int
  workspaceId Int
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onUpdate: NoAction)

  @@id([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
}

enum TaskPriority {
  high
  nomal
  low
}

enum TagColor {
  default
  green
  brown
  grey
  orange
  yellow
  blue
  purple
  red
  pink
  indigo
}
