# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddAttachmentInput {
  name: String!
  path: String!
}

input AddUserInput {
  email: String!
  emailVerified: Boolean!
  isAnonymous: Boolean!
  name: String!
  photoUrl: String
  uid: String!
}

type AttachmentModel {
  createdAt: Date!
  id: Int!
  name: String!
  path: String!
  task: TaskModel
  updatedAt: Date!
  user: UserModel!
  workspace: WorkspaceModel
}

type CommentModel {
  body: String!
  createdAt: Date!
  id: Int!
  task: TaskModel!
  updatedAt: Date!
  user: UserModel!
}

"""Date custom scalar type"""
scalar Date

type Mutation {
  deleteAttachyment(id: Int!): AttachmentModel
  deleteUser(id: Int!): UserModel
  saveAttachment(attachment: AddAttachmentInput!): AttachmentModel
  saveUser(user: AddUserInput!): UserModel
  updateAttachment(attachment: UpdateAttachmentInput!): AttachmentModel!
  updateUser(user: UpdateUserInput!): UserModel!
}

type ProjectModel {
  createdAt: Date!
  detail: String
  id: Int!
  name: String!
  task: TaskModel
  updatedAt: Date!
  user: UserModel!
  workspace: WorkspaceModel!
}

type Query {
  findCurrentUser: UserModel!
  findUserById(id: Int!): AttachmentModel
  findUserByPath(path: String!): AttachmentModel
}

enum TagColor {
  blue
  brown
  default
  green
  grey
  indigo
  orange
  pink
  purple
  red
  yellow
}

type TagModel {
  color: TagColor!
  createdAt: Date!
  id: Int!
  name: String!
  tasksOnTags: [TasksOnTags!]
  updatedAt: Date!
  user: UserModel!
  workspace: WorkspaceModel!
}

type TaskModel {
  attachments: [AttachmentModel!]
  comments: [CommentModel!]
  createdAt: Date!
  detail: String
  id: Int!
  limitAt: Date
  name: String!
  priority: TaskPriority!
  project: ProjectModel!
  startAt: Date
  tasksOnTags: [TasksOnTags!]
  tasksOnUsers: [TasksOnUsers!]
  updatedAt: Date!
  user: UserModel!
}

enum TaskPriority {
  high
  low
  nomal
}

type TasksOnTags {
  tag: TagModel!
  tagId: Int!
  task: TaskModel!
  taskId: Int!
}

type TasksOnUsers {
  task: TaskModel!
  taskIc: Int!
  user: UserModel!
  userId: Int!
}

input UpdateAttachmentInput {
  id: Int!
  name: String!
  path: String!
}

input UpdateUserInput {
  id: Int!
  name: String!
}

type UserModel {
  attachments: [AttachmentModel!]!
  comments: [CommentModel!]!
  createdAt: Date!
  email: String!
  emailVerified: Boolean!
  id: Int!
  isAnonymous: Boolean!
  name: String!
  photoUrl: String
  projects: [ProjectModel!]!
  tags: [TagModel!]!
  tasks: [TaskModel!]!
  tasksOnUsers: [TasksOnUsers!]
  uid: String!
  updatedAt: Date!
  usersOnWorkspaces: [UsersOnWorkspaces!]!
}

type UsersOnWorkspaces {
  user: UserModel!
  userId: Int!
  workspace: WorkspaceModel!
  workspaceId: Int!
}

type WorkspaceModel {
  Id: Int!
  createdAt: Date!
  detail: String
  image: [AttachmentModel!]
  name: String!
  projects: [ProjectModel!]
  tags: [TagModel!]
  updatedAt: Date!
  usersOnWorkspaces: [UsersOnWorkspaces!]!
}